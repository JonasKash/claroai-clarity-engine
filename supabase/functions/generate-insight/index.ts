import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Get the request body
    const { record } = await req.json()
    
    if (!record) {
      throw new Error('No record provided')
    }

    // Extract lead data
    const leadData = record.lead_data || {}
    const recordId = record.id

    // Validate required fields
    if (!leadData.nome || !leadData.desafio || !leadData.instagram) {
      throw new Error('Missing required lead data')
    }

    // Create Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    // OpenAI API Key
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured')
    }

    // Build the prompt for OpenAI
    const prompt = `Você é um analista de negócios de elite. Um lead do tipo '${leadData.tipoNegocio || 'negócio'}' com o desafio '${leadData.desafio}' e o Instagram '${leadData.instagram}' precisa de UM insight rápido e acionável. 

Analise esses dados e gere uma única frase poderosa que revele uma oportunidade ou um gargalo claro. Seja direto e crie urgência. 

Exemplo de formato: "Seu Instagram tem bom engajamento, mas a falta de um pixel de conversão está jogando fora 90% do seu potencial de remarketing."

Dados do lead:
- Nome: ${leadData.nome}
- Tipo de negócio: ${leadData.tipoNegocio || 'não informado'}
- Desafio: ${leadData.desafio}
- Instagram: ${leadData.instagram}
- WhatsApp: ${leadData.whatsapp || 'não informado'}

Gere apenas o insight, sem explicações adicionais.`

    // Call OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'Você é um analista de negócios especializado em insights rápidos e acionáveis. Seja direto, específico e crie urgência.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 150,
        temperature: 0.7,
      }),
    })

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.json()
      throw new Error(`OpenAI API error: ${errorData.error?.message || 'Unknown error'}`)
    }

    const openaiData = await openaiResponse.json()
    const generatedInsight = openaiData.choices[0]?.message?.content?.trim()

    if (!generatedInsight) {
      throw new Error('No insight generated by OpenAI')
    }

    // Update the record in Supabase with the generated insight
    const { error: updateError } = await supabase
      .from('chat_leads')
      .update({
        generated_insight: generatedInsight,
        status: 'insight_ready'
      })
      .eq('id', recordId)

    if (updateError) {
      throw new Error(`Failed to update record: ${updateError.message}`)
    }

    // Return success response
    return new Response(
      JSON.stringify({
        success: true,
        insight: generatedInsight,
        recordId: recordId
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    )

  } catch (error) {
    console.error('Error in generate-insight function:', error)
    
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    )
  }
}) 